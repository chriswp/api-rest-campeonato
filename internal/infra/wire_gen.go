// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package infra

import (
	"database/sql"
	repository2 "github.com/chriswp/api-rest-campeonato/internal/domain/repository"
	usecase2 "github.com/chriswp/api-rest-campeonato/internal/domain/usecase"
	"github.com/chriswp/api-rest-campeonato/internal/infra/handler"
	"github.com/chriswp/api-rest-campeonato/internal/infra/http"
	"github.com/chriswp/api-rest-campeonato/internal/infra/registry"
	"github.com/chriswp/api-rest-campeonato/internal/infra/repository"
	"github.com/chriswp/api-rest-campeonato/internal/usecase"
	"github.com/chriswp/api-rest-campeonato/internal/usecase/validators"
	"github.com/google/wire"
	"os"
	"time"
)

// Injectors from wire.go:

func NewRegistry(db *sql.DB) (*registry.Registry, error) {
	registryRegistry := ProvideRegistry(db)
	return registryRegistry, nil
}

func NewCompetitionUseCase() *usecase.CompetitionUseCase {
	competitionRepository := ProvideCompetitionRepository()
	competitionUseCase := usecase.NewCompetitionUsecase(competitionRepository)
	return competitionUseCase
}

func NewFootballFanUseCase(db *sql.DB) *usecase.FootballFanUseCase {
	footballFanRepository := ProvideFootballFanRepository(db)
	footballFanValidator := ProvideFootballFanValidator(footballFanRepository)
	footballFanUseCase := ProvideFootballFanUseCase(footballFanRepository, footballFanValidator)
	return footballFanUseCase
}

func NewCompetitionHandler() *handler.CompetitionHandler {
	competitionRepository := ProvideCompetitionRepository()
	competitionUseCase := usecase.NewCompetitionUsecase(competitionRepository)
	competitionHandler := handler.NewCompetitionHandler(competitionUseCase)
	return competitionHandler
}

func NewUserHandler(db *sql.DB) *handler.UserHandler {
	userRepository := repository.NewUserRepositoryImpl(db)
	userUseCase := usecase.NewUserUseCase(userRepository)
	userHandler := handler.NewUserHandler(userUseCase)
	return userHandler
}

func NewFootballFanHandler(db *sql.DB) *handler.FootballFanHandler {
	footballFanRepository := ProvideFootballFanRepository(db)
	footballFanValidator := ProvideFootballFanValidator(footballFanRepository)
	footballFanUseCase := ProvideFootballFanUseCase(footballFanRepository, footballFanValidator)
	footballFanHandler := handler.NewFootballFanHandler(footballFanUseCase)
	return footballFanHandler
}

// wire.go:

func ProvideRegistry(db *sql.DB) *registry.Registry {
	return &registry.Registry{
		Database:        db,
		UserRepo:        repository.NewUserRepositoryImpl(db),
		CompetitionRepo: ProvideCompetitionRepository(),
	}
}

func ProvideCompetitionRepository() repository2.CompetitionRepository {
	apiURL := os.Getenv("FOOTBALL_API_URL")
	token := os.Getenv("FOOTBALL_API_TOKEN")
	httpClient := http.NewHTTPClient(5 * time.Second)

	return repository.NewCompetitionRepositoryImpl(apiURL, token, httpClient)
}

var RegistrySet = wire.NewSet(
	ProvideRegistry,
	UserUseCaseSet,
	CompetitionUseCaseSet,
)

var AuthUseCaseSet = wire.NewSet(usecase.NewAuthUseCase, wire.Bind(new(usecase2.AuthUseCase), new(*usecase.AuthUseCaseImpl)))

var CompetitionUseCaseSet = wire.NewSet(
	ProvideCompetitionRepository, usecase.NewCompetitionUsecase,
)

var UserUseCaseSet = wire.NewSet(repository.NewUserRepositoryImpl, usecase.NewUserUseCase)

var FootballFanUseCaseSet = wire.NewSet(
	ProvideFootballFanRepository,
	ProvideFootballFanValidator,
	ProvideFootballFanUseCase,
)

func ProvideFootballFanRepository(db *sql.DB) repository2.FootballFanRepository {
	return repository.NewFootballFanRepositoryImpl(db)
}

func ProvideFootballFanValidator(footballFanRepository repository2.FootballFanRepository) *validators.FootballFanValidator {
	return validators.NewFootballFanValidator(footballFanRepository)
}

func ProvideFootballFanUseCase(footballFanRepository repository2.FootballFanRepository, validator *validators.FootballFanValidator) *usecase.FootballFanUseCase {
	return usecase.NewFootballFanUseCase(footballFanRepository, validator)
}
